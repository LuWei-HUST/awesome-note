操作系统的分类
    批处理操作系统
        单道批处理
        多到批处理

    分时操作系统
        一个计算机系统与多个终端设备连接
        将CPU工作时间划分为许多很短的时间片
        特点：多路性、独立性、交互性、及时性

    实时操作系统
        在被控对象允许的时间范围内做出快速反应
        对交互能力要求不高，但要求可靠性有保障
        实时控制系统
        实时信息处理系统

    网络操作系统
        软件和有关协议的集合
        特征：硬件独立性、多用户支持

    分布式操作系统
        是网络操作系统更高级的形式，保持网络系统的全部功能，同时又有透明性、可靠性、高性能等特性
        
    微型计算机操作系统
        微机操作系统
        windows Mac OS Linux

    嵌入式操作系统
        特点：
            微型化 占用资源、代码量少
            可定制 针对硬件变化进行结构与功能上的配置
            实时性
            可靠性
            易移植性 硬件抽象层（HAL）板级支撑包（BSP）

嵌入式操作系统 内核架构
    宏内核
        用户服务和内核服务在同一空间中实现
        代码耦合度非常高

    微内核
        用户服务和内核服务在不同的地址空间中实现
        执行速度较慢
        结构相当清晰，有利于协作开发
        有良好的移植性，代码量非常少
        有相当好的伸缩性、扩展性

嵌入式操作系统 内存管理方法
    分区存储
        静态分区 预先分好，标志位标记
        可变分区 按作业的大小来划分
        可重定位分区 动态运行时逻辑地址，真正执行时转换为物理地址，需要硬件支持

    分页存储
        将进程逻辑地址空间分成大小相等的片，称为页面或页
        内存空间也这么分

    分段存储
        作业的地址空间分为若干个段，长度不等

    段页式存储
        先将用户程序分成若干个段，再把每个段分成若干个页，并为每个段赋予一个段名

Linux系统中DNS的配置文件
    /etc/resolv.conf

软件过程
    是制作软件产品的一组活动及其结果
    软件活动主要包括软件描述、软件开发、软件有效性验证、软件演化

软件设计活动
    数据设计、软件结构设计、人机界面设计、过程设计

敏捷开发方法特点
    适应性而非预设性 反馈机制
    面向人而非面向过程
        要求开发人员必须有权做技术方面的所有决定
        强调开发中相关人员之间的消息交流
        提倡直接的面对面交流

从构件的外部形态看，可分为五类
    独立而成熟的构件
        独立而成熟的构件得到了实际运行环境的多次检验，该类构件隐藏了所有接口，用户只需用规定好的命令进行使用。例如，数据库管理系统和操作系统等
    有限制的构件
        有限制的构件提供了接口，指出了使用的条件和前提，这种构件在装配时，会产生资源冲突、覆盖等影响，在使用时需要加以测试。例如，各种面向对象
            程序设计语言中的基础类库等
    适应性构件
        适应性构件进行了包装或使用了接口技术，处理了不兼容性、资源冲突等，可以直接使用。这种构件可以不加修改地使用在各种环境中，例如ActiveX等
    装配的构件
        装配的构件在安装时，已经装配在操作系统、数据库管理系统或信息系统不同层次上，使用胶水代码就可以进行连接使用。目前一些软件商提供的大多数
            软件产品都属于这一类
    可修改的构件
        可修改的构件可以进行版本替换。如果对原构件修改错误、增加新功能，可以利用重新“包装”或写接口来实现构件的替换。这种构件在应用系统开发中使
            用得比较多

中间件的基本功能
    负责客户端和服务器之间的连接和通信，客户机与应用层的高效率通信机制
    提供应用层不同服务之间的互操作机制，应用层与数据库之间的连接和控制
    提供一个多层架构的应用开发和应用的平台，一个应用开发框架，支持模块化的应用开发
    屏蔽硬件、操作系统、网络和数据库的差异
    提供应用的负载均衡和高可用性、安全机制与管理功能，以及交易管理机制，保证交易的一致性
    提供一组通用的服务去执行不同的功能，避免重复的工作和使应用之间可以协作

脚本的基本结构
    线性脚本
        采用录制工具记录测试人员手动执行测试用例的（例如鼠标点击、输入字符等）得到的脚本，这些脚本是未做修改的
    结构化脚本
        结构化脚本具有各种逻辑结构，包括选择型结构、分支结构、循环迭代结构，而且具有函数调用功能。结构化脚本具有很好的可用性和灵活性，易于维护
    共享脚本
        指一个脚本可以被多个测试用例使用，即脚本语言允许一个脚本调用另一个脚本
    数据驱动脚本
        数据驱动脚本是将测试输入存储在独立的脚本文件中，而不是脚本中。这样，脚本可以针对不同的数据输入实现多个测试用例
    关键字驱动脚本
        关键字驱动脚本是数据驱动脚本的逻辑扩展，它用测试文件描述测试用例，它说明测试用例做什么，而不是如何做。关键字驱动脚本允许使用描述性的方
            法，只需要提供测试用例的描述，即可生成测试用例

 
统一过程模型（RUP）
    9个核心工作流
        业务建模
        需求
        分析与设计
        实现
        测试
        部署
        配置与变更管理
        环境

    4个阶段
        初始 定义最终产品视图和业务模型
        细化 设计及确定系统的体系结构，制订工作计划及资源要求
        构造 构造产品并继续演进需求、体系结构、计划直至产品提交
        移交 把产品提交给用户使用

    特点
        用例驱动
        以体系结构为中心
            采用“4+1”视图模型描述软件系统的体系结构
            逻辑视图、实现视图、用例视图、进程视图、部署视图
            分析人员和测试人员关心的是系统的行为，会侧重于用例视图
            最终用户关心的是系统的功能，会侧重于逻辑视图
            程序员关心的是系统的配置、装配的问题，会侧重于实现视图
            系统集成人员关心的是系统的性能、可伸缩性、吞吐率等问题，会侧重于进程视图
            系统工程师关心的是系统的发布、安装、拓扑结构等问题，会侧重于部署视图

UML 5种视图
    用例视图、逻辑视图、进程视图、实现视图、部署视图
    用例视图：描述系统的功能需求，方便找出用例和执行者；它展示了一个外部用户能够观察到的系统功能模型，主要包括用例图
    逻辑视图：描述如何实现系统内部的功能；系统的静态结构和因发送消息而出现的动态协作关系。逻辑视图包含类图、状态图、顺序图、合作图和活动图
    进程视图：描述系统的并发性，并处理这些线程间的通信和同步。进程视图主要包括状态图、顺序图、合作图、活动图、构件图和配置图
    实现视图：描述系统代码构件组织和实现模块及它们之间的依赖关系；实现视图主要包括构件图
    部署视图：定义系统中软硬件的物理体系结构及连接、哪个程序或对象驻留在哪台计算机上执行；主要包括配置图

4+1视图模型
    逻辑视图（设计视图） 系统静态结构，主要关注对象、类、包、接口、继承、关联等。系统提供了哪些功能，通常包括类图、对象图
    开发视图（实现视图） 软件的静态软件结构，主要关注模块、组件、库、子系统以及它们之间的依赖关系和层次结构。软件如何被构建，通常包括包图、组件图
    过程视图 系统的动态方面，描述进程、线程、服务以及它们如何交互和通信
    物理视图 计算机、服务器（节点）、网络连接以及软件组件到这些硬件的映射。
    场景视图 通过用例或用户场景来展示系统关键功能的执行流程，描述不同对象和进程之间是如何协作来完成任务的。

基于架构的软件开发方法
    Architecture-Based Software Design，ABSD
    设计元素
        ABSD是一个自顶向下、递归细化的方法，软件系统的体系结构通过该方法得到细化，直到能产生软件构件和类
        由构成体系结构的商业、质量和功能需求的组合驱动的
        系统 概念子系统 概念构件 实际构件
    视角与视图
        考虑体系结构时，要从不同的视角（Perspective）来观察对架构的描述，这需要软件设计师考虑体系结构的不同属性。例如，展示功能组织的静态视角能判断质量属性，
        展示并发行为的动态视角能判断系统行为特性，因此，选择特定的视角或视图（如逻辑视图、进程视图、实现视图和配置视图）可以全方位的考虑体系结构设计。使用逻辑
        视图来设计元素的功能和概念接口，设计元素的功能定义了它本身在系统中的角色，这些角色包括功能、性能等
    用例和质量场景
        用例是系统的一个给予用户一个结果值的功能点，用例用来捕获功能需求
        在使用用例捕获功能需求的同时，人们通过定义特定场景来捕获质量需求，并称这些场景为质量场景。
        人们使用质量场景捕获变更、性能、可靠性和交互性，分别称之为变更场景、性能场景、可靠性场景和交互性场景。

系统架构评估中的重要概念
    敏感点（Sensitivity Point）和权衡点（Tradeoff Point）
        敏感点是一个或多个构件的特性。研究敏感点可使设计人员或分析员明确在实现质量目标时应注意什么。
        权衡点是影响多个质量属性的特性，是多个质量属性的敏感点。例如，改变加密等级可能会对安全性和性能产生非常重要的影响
    风险承担者或称为利益相关人
    场景
        场景是从风险承担者的角度对与系统的交互的简短描述。在架构评估中，一般采用刺激（Stimulus）、环境（Environment）和响应（Response）三方面来对场景进行描述

E-R图合并时存在的冲突
    属性冲突：不同E-R图中属性的类型、取值范围、数据单位等不一致
    命名冲突：相同意义的属性，有不同的命名，或者名称相同的属性有不同意义
    结构冲突：同一实体在不同的分E-R图中有不同的属性，同一对象在某一分E-R图中被抽象为实体而在另一分E-R图中被抽象为属性

E-R图合并时的优化
    实体类型的合并 两个具有1:1联系或1:*联系的实体，可以予以合并，使实体个数减少，有利于减少将来数据库操作过程中的连接开销
    冗余属性的消除 合并后出现的冗余属性
    冗余联系的消除 可能会出现实体联系的环状结构，通常直接联系可以通过间接联系来表达，可消除直接联系

嵌入式微处理器分类
    微处理器（Micro Processor Unit，MPU） 主要是CPU核心。将微处理器装配在专门设计的电路板上，只保留与嵌入式应用相关的母板功能。与工业控制计算机相比，其优点在于体积小，重量轻，
        成本低以及可靠性高，但是电路板上必须包括ROM、RAM、总线接口、各种外设等器件，降低了系统的可靠性，技术保密性也差。
    微控制器（Micro Control Unit，MCU） 又称单片机。CPU+内存+存储+I/O。与MPU相比，MCU的最大优点在于单片化，体积大大减小，从而使功耗成本下降，可靠性提高
    信号处理器（Digital Signal Processor，DSP） DSP处理器对系统结构和指令进行了特殊设计（通常采用一种哈佛结构），使其适合于执行DSP算法，编译效率高，指令执行速度也高
    图形处理器（Graphics Processing Unit，GPU） GPU是一种可执行渲染3D图形等图像的半导体芯片。
    片上系统（System on Chip，Soc） 集成度很高，CPU+GPU+内存控制器+各种专用核心+无线模块等

嵌入式操作系统与通用操作系统相比具有的特点
    可剪裁性 支持开放性和可伸缩性的体系结构
    可移植性 通常可运行在不同体系结构的处理器和开发板上
    强实时性 实时性通常较强，可用于各种设备的控制
    强紧凑性 由于资源受限，系统代码需要紧凑、精炼
    高质量代码 安全攸关，要求代码质量可靠
    强定制性 可根据不同需求，进行专业化定制
    标准接口 提供统一的驱动接口
    强稳定性、弱交互性 较强的稳定性。一般不提供操作命令
    强确定性 应能够确保在规定的时间、规定的容量内不发生任务超时和资源枯竭
    操作简洁、方便 提供友好的图形GUI
    较强的硬件适应性 可适应多种类型的硬件资源
    可固化性 通常是固化在ROM中

嵌入式数据库的分类
    基于内存的数据库系统
        整个数据库或其主要的“工作”部分放入内存，可以较精确地估算和安排事务的处理时间
    基于文件的数据库系统
        以文件方式存储数据库数据，即数据按照一定格式存储在磁盘中。使用时由应用程序通过相应的驱动程序甚至直接对数据文件进行读写
        访问方式是被动的，任何了解其文件格式的应用程序都可以直接读取，因此安全性很低
    基于网络的数据库系统
        是基于手机4G/5G的移动通信基础之上的数据库系统，在逻辑上可以把嵌入式设备看做远程服务器的一个客户端
        主要由三部分组成：客户端、通信协议和远程服务器
        特点：
            无需解析SQL语句
            支持更多的SQL操作
            客户端小、无须支持可剪裁性
            有利于代码重用

AI芯片的关键特征
    使用新型计算范式
    具有训练和推断能力
    具有大数据处理能力
    可重构能力

AI芯片的技术架构
    图形处理单元（Graphics Processing Unit，GPU）
    现场可编程门阵列（Field Programmable Gate Array，FPGA）
    专用集成电路（Application Specific Integrated Circuit，ASIC）
    张量处理单元（Tensor Processing Unit，TPU）

SDN网络架构
    软件定义网络（Software Defined Network）
    由下至上分为
        数据平面 由网络转发设备组成
        控制平面 掌握网络全局信息，负责转发设备的各种转发规则的下发
        应用平面 包含各种基于SDN的网络应用

企业数字化转型的五个发展阶段
    初始级
    单元级
    流程级
    网络级
    生态级

信息化需求的三个层次
    战略需求
    运作需求
    技术需求

软件产品管理办法
    第四条规定任何单位和个人不得开发、生产、销售、进出口含有以下内容的软件产品
        侵犯他人知识产权的
        含有计算机病毒的
        可能危害计算机系统安全的
        含有国家规定禁止传播的内容的
        不符合我国软件标准规范的

CMMI软件能力成熟度
    Capacity Maturity Model Integration for Software
    初始级 过程混乱且随意，成功依赖于组织内人员的能力
    已管理级 组织要确保策划、文档化、执行、监督和控制项目级的过程，并且需要为过程建立明确的目标
    已定义级 能够根据自身的特殊情况定义适合自己企业和项目的标准流程，将这套管理体系与流程予以制度化
    量化管理级 组织建立了产品质量、服务质量以及过程性能的定量目标，与已定义级的关键区别在于对过程性能的可预测性
    优化级 通过增量式的与创新式的过程与技术改进，不断地改进过程性能

需求管理的主要活动
    变更控制
    版本控制
    需求跟踪
    需求状态跟踪

需求管理强调的内容
    控制对需求基线的变动
    保持项目计划与需求一致
    控制单个需求和需求文档的版本情况
    管理需求和联系链，或管理单个需求和其他项目可交付产品之间的依赖关系
    跟踪基线中的需求状态

耦合
    模块之间耦合的强度，主要依赖于一个模块对另一个模块的调用、一个模块向另一个模块传递的数据量、一个模块施加到领一个模块的控制的多少，以及模块之间接口的复杂程度
    耦合度从高到低
        非直接耦合：两个模块之间没有直接关系，其相互联系完全是通过主模块的控制和调用来实现的
        数据耦合：模块之间通过数据参数而不是控制参数、公共数据结构或外部变量来交换信息
        标记耦合：一组模块通过参数表来传递记录信息，这个记录是某一数据结构而非简单变量
        控制耦合：通过传送开关、标志、名字等控制信息来控制或选择另一模块的功能
        通信耦合：一组模块共用了一组输入信息，或者它们的输出需要整合以形成完整数据
        公共耦合：一组模块都访问同一个公共数据结构
        内容耦合：一个模块直接访问另一个模块的内部数据，或者一个模块不通过正常接口转到另一模块内部

内聚
    内聚度从高到低
        功能内聚 完成一个单一功能，各个部分协同工作，缺一不可
        顺序内聚 处理元素相关，并且必须顺序执行
        通信内聚 所有处理元素集中在一个数据结构的区域上
        过程内聚 处理元素相关，而且必须按特定的次序执行
        时间内聚 所包含的任务必须在同一时间间隔内执行
        逻辑内聚 完成逻辑上相关的一组任务
        偶然内聚 完成一组没有关系或松散关系的任务

特定领域软件体系架构
    Domain Specific Software Architecture，DSSA
    垂直域 定义了一个特定的系统族，包含整个系统族内的多个系统，结果是在该领域中可作为系统的可行解决方案的一个通用软件体系结构
    水平域 定义了在多个系统和多个系统族中功能区域的共有部分。在子系统级上涵盖多个系统族的特定部分功能

中华人民共和国著作权法
    改编、翻译、注释、整理已有作品而产生的作品，其著作权由改编、翻译、注释、整理人享有，但行使著作权时不得侵犯原作品的著作权
    一般职务作品，作者享有著作权，单位享有优先使用作品的权利；特殊职务作品的著作权归单位，作者享有署名权
    委托作品的著作权根据合同约定，合同未明确或未签订合同的著作权属于受托人
    合作作品的著作权归属于所有参与人（不含组织创作人）
    报社、期刊社、通讯社、广播电台、电视台的工作人员创作的职务作品，除特定情况外，著作权的其他权利由法人或组织享有，作者仅享有署名权

作业的期望时间
    PERT加权平均法
        期望时间（TE） = （乐观时间 + 4 × 最可能时间 + 悲观时间） / 6

数据库三级模式
    视图层 描述整个数据库的某个部分的数据
    逻辑层 描述数据库中存储的数据以及这些数据间存在的关系
    物理层 描述数据在存储器中是如何存储的

    概念模式 也称模式，是数据库中全部数据的逻辑结构和特征的描述，不仅描述概念记录类型，还要描述记录间的联系、操作、数据的完整性和安全性
    外模式 也称用户模式或子模式 是用户需要使用的部分数据的描述
    内模式 也称存储模式，是数据物理结构和存储方式的描述，是数据在数据库内部的表示方式。定义所有的内部记录类型、索引和文件的组织方式，以及数据控制方面的细节

鸿蒙操作系统
    分布式操作系统，支持多种终端设备
    采用分层的层次化设计，从下向上依次为：内核层、系统服务层、框架层和应用层
    技术特性
        分布式架构首次用于终端OS，实现跨终端无缝协同体验
        确定时延引擎和高性能IPC技术实现系统天生流畅
        基于微内核架构重塑终端设备可信安全
        通过同一IDE支撑一次开发，多端部署，实现跨终端生态共享

    分布式架构
        分布式软总线、分布式设备虚拟化、分布式数据管理和分布式任务调度

嵌入式中间件的一般架构
    消息中间件
        消息传输过程中保存消息的一种容器
        在消息中间件中，队列的目的是提供路由并保证消息的传递
        两个基本特点
            采用异步处理模式
            应用程序和应用程序调用关系为松耦合关系
        消息传递服务模型有点对点模型（PTP）和发布-订阅模型（Pub/Sub）之分
    分布式对象中间件
        为了解决分布计算和软件复用过程中存在的异构问题而提出的
        三个基本特点
            对象组件之间普遍采用软总线技术
            具有不依赖于编程语言、软硬件平台和网络协议等特点
            对象可以用任何一种软件开发商所支持的语言和平台来实现

嵌入式中间件的主要功能
    网络通信
    存储管理
    数据处理

一些默认端口
    HTTP 80
    HTTPS 443
    POP3 邮件接收协议 110
    SMTP 邮件发送协议 25
    IMAP 交互式邮件存取协议 143

软件可靠性的定量描述
    失效概率 从软件运行开始，到某一时刻t为止，出现失效的概率
    可靠度 软件系统在规定的条件下、规定的时间内不发生失效的概率
    失效强度 单位时间软件系统出现失效的概率
    平均失效前时间 Mean Time To Failure，MTTF，从t=0时到故障发生时系统的持续运行时间的期望值
    平均恢复前时间 Mean Time To Restoration，MTTR，从出现故障到修复成功的这段时间，包括确认失效发生所必需的时间，记录所有任务的时间，以及将设备重新投入使用的时间
    平均故障间隔时间 Mean Time Between Failures，MTBF，失效或维护中所需的平均时间，包括故障时间以及检测和维护设备的时间；系统从一次故障修复后，到下一次发生故障之间的平均时间。

数据资产的特征
    可增值或贬值
    可共享
    可控制
    可量化
    可变现

数据管理能力成熟度评估模型
    8个能力域
        数据战略
        数据治理
        数据架构
        数据标准
        数据质量
        数据安全
        数据应用
        数据生存周期

软件配置管理的核心内容
    版本控制
    变更控制

SOA与微服务的区别
    微服务相比于SOA更加精细，微服务更多地以独立的进程的方式存在，互相之间并无影响
    微服务提供的接口方式更加通用化，例如HTTP RESTful方式，各种终端都可以调用，无关语言、平台
    微服务更倾向于分布式去中心化的部署方式，在互联网业务场景下更合适

    SOA架构是一个面向服务的架构，系统各个模块之间是松耦合的，以企业服务总线链接各个子系统，是集中式的技术架构，应用服务间相互依赖导致部署复杂，应用间交互使用远程通信，降低了响应速度
    微服务架构是SOA架构的进一步优化，去除了ESB企业服务总线，是一个真正意义上去中心化的分布式架构

UML 对象之间的消息类型
    简单消息
    返回消息
    同步消息
    异步消息
    参与者创建消息
    参与者销毁消息
    无触发对象和无接收对象的消息

构件的三大特征
    独立性 可独立部署
    复用性 可作为第三方组装单元
    无外部可见的状态

几种逻辑覆盖方法的测试强度
    语句覆盖 程序中的每个可执行语句至少被执行一次
    判定覆盖 & 分支覆盖 程序中的每个判定的“真”和“假”两种结果至少各出现一次
    路径覆盖 程序中所有可能的执行路径

规则体系结构风格
    包括
        规则集
        规则解释器
        规则/数据选择器
        工作内存

软件架构复用的类型
    机会复用 开发过程中，只要发现有可复用的资产，就对其进行复用
    系统复用 在开发之前，就要进行规划，以确定哪些需要复用

遗留系统的演化策略
    高水平、低价值 集成
    高水平、高价值 改造
    低水平、低价值 淘汰
    低水平、高价值 继承

软件架构复用的基本过程
    构造/获取可复用的软件资产
    管理可复用资产 最重要的是构件库
        关键问题
            构件分类
            构件检索
    使用可复用资产

DSSA的基本活动
    领域分析 主要目标是获得领域模型
    领域设计 主要目标是获得DSSA
    领域实现 主要目标是依据领域模型和DSSA开发和组织可重用信息

参与DSSA的人员
    领域专家 提供关于领域中系统的需求规约和实现的知识，帮助组织规范的、一致的领域字典，帮助选择样本系统作为领域工程的依据，复审领域模型、DSSA等领域工程产品等
    领域分析人员 控制整个领域分析过程，进行知识获取，将获取的知识组织到领域模型中，根据现有系统、标准规范等验证领域模型的准确性和一致性，维护领域模型
    领域设计人员 控制整个软件设计过程，根据领域模型和现有的系统开发出DSSA，对DSSA的准确性和一致性进行验证，建立领域模型和DSSA之间的联系
    领域实现人员 根据领域模型和DSSA，或者从头开发可重用构件，或者利用再工程的技术从现有系统中提取可重用构件，对可重用构件进行验证，建立DSSA与可重用构件间的联系

质量属性场景的6个部分
    刺激源
    刺激
    环境
    制品
    响应
    响应度量

质量属性效用树的层次
    根-质量属性-属性求精（分类）-场景

计算机软件保护条例
    软件著作权自软件开发完成之日起产生

进程
    通过其物理实体被操作系统所感知
    物理实体（进程的静态描述）分为程序、数据集合和进程控制块

    线程可共享的资源：该进程代码段、该进程全局变量、该进程中打开的文件、定时器、进程的当前目录、进程用户ID、进程组ID
    不能共享的资源：线程的栈指针、调度优先级、临时变量等

请求页式存储管理
    动态页式内存管理方式
    NUR Not Used Recently，最近未用淘汰算法
    R=0, M=0：最近未被访问，也未被修改。这是最理想的淘汰候选，因为淘汰它不需要额外的写回磁盘操作。
    R=0, M=1：最近未被访问，但曾被修改过。淘汰这类页面需要先将其内容写回磁盘。
    R=1, M=0：最近被访问过，但未被修改。虽然最近被使用，但淘汰它不需要写回操作。
    R=1, M=1：最近既被访问过又被修改过。这是最不应该被淘汰的页面，因为它最近很活跃，并且淘汰它需要I/O开销。

逻辑文件的两种形式
    无结构的流式文件
    有结构的记录式文件

RAID 5实际容量
    （总盘块数-1）*最小磁盘的容量

OSPF
    Open Shortest Path First，动态路由协议，用于自动发现自治网络中可用的路由信息，并动态生成路由表

BGP
    Border Gateway Protocol，边界网关协议，用于自治系统之间的路由选择

UML的各种图
    顺序图 用于描述对象之间动态的交互关系，并强调消息的时间次序
    类图 用于描述系统的静态结构
    构件图 用于描述各种软件构件之间的依赖关系、显示代码的静态结构
    用例图 用于从用户角度描述系统功能
    通信图 用于显示组件及其消息交互关系，不强调交互的时间次序

结构化方法
    SASD Structured Analysis and Structured Design
    也称为面向功能的软件开发方法或面向数据流的软件开发方法

面向对象分析方法的5个基本步骤
    确定对象和类
    确定结构
    确定主题
    确定属性
    确定方法

基于构件的软件工程
    CBSE Component-Based Software Engineering
    用于CBSE的构件应具有以下特征
        可组装性
        可部署性
        文档化
        独立性
        标准化

    构件组装的常见方式
        顺序组装
        层次组装
        叠加组装

提升可用性的策略
    错误检测
        心跳、Ping/Echo、异常
    错误恢复
        表决、主动冗余、被动冗余、重新同步、内测、检查点/回滚
    错误避免
        服务下线、事务、进程监控器

信息物理系统
    集成感知、计算、通信、控制等技术

容错设计技术
    恢复块技术
    N版本程序设计
    冗余设计

系统配置技术
    双机热备技术
        双机热备模式
        双机互备模式
        双机双工模式
    服务器集群技术