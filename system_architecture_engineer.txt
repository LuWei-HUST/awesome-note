操作系统的分类
    批处理操作系统
        单道批处理
        多到批处理

    分时操作系统
        一个计算机系统与多个终端设备连接
        将CPU工作时间划分为许多很短的时间片
        特点：多路性、独立性、交互性、及时性

    实时操作系统
        在被控对象允许的时间范围内做出快速反应
        对交互能力要求不高，但要求可靠性有保障
        实时控制系统
        实时信息处理系统

    网络操作系统
        软件和有关协议的集合
        特征：硬件独立性、多用户支持

    分布式操作系统
        是网络操作系统更高级的形式，保持网络系统的全部功能，同时又有透明性、可靠性、高性能等特性
        
    微型计算机操作系统
        微机操作系统
        windows Mac OS Linux

    嵌入式操作系统
        特点：
            微型化 占用资源、代码量少
            可定制 针对硬件变化进行结构与功能上的配置
            实时性
            可靠性
            易移植性 硬件抽象层（HAL）板级支撑包（BSP）

嵌入式操作系统 内核架构
    宏内核
        用户服务和内核服务在同一空间中实现
        代码耦合度非常高

    微内核
        用户服务和内核服务在不同的地址空间中实现
        执行速度较慢
        结构相当清晰，有利于协作开发
        有良好的移植性，代码量非常少
        有相当好的伸缩性、扩展性

嵌入式操作系统 内存管理方法
    分区存储
        静态分区 预先分好，标志位标记
        可变分区 按作业的大小来划分
        可重定位分区 动态运行时逻辑地址，真正执行时转换为物理地址，需要硬件支持

    分页存储
        将进程逻辑地址空间分成大小相等的片，称为页面或页
        内存空间也这么分

    分段存储
        作业的地址空间分为若干个段，长度不等

    段页式存储
        先将用户程序分成若干个段，再把每个段分成若干个页，并为每个段赋予一个段名

Linux系统中DNS的配置文件
    /etc/resolv.conf

软件过程
    是制作软件产品的一组活动及其结果
    软件活动主要包括软件描述、软件开发、软件有效性验证、软件演化

软件设计活动
    数据设计、软件结构设计、人机界面设计、过程设计

敏捷开发方法特点
    适应性而非预设性 反馈机制
    面向人而非面向过程
        要求开发人员必须有权做技术方面的所有决定
        强调开发中相关人员之间的消息交流
        提倡直接的面对面交流

从构件的外部形态看，可分为五类
    独立而成熟的构件
        独立而成熟的构件得到了实际运行环境的多次检验，该类构件隐藏了所有接口，用户只需用规定好的命令进行使用。例如，数据库管理系统和操作系统等
    有限制的构件
        有限制的构件提供了接口，指出了使用的条件和前提，这种构件在装配时，会产生资源冲突、覆盖等影响，在使用时需要加以测试。例如，各种面向对象
            程序设计语言中的基础类库等
    适应性构件
        适应性构件进行了包装或使用了接口技术，处理了不兼容性、资源冲突等，可以直接使用。这种构件可以不加修改地使用在各种环境中，例如ActiveX等
    装配的构件
        装配的构件在安装时，已经装配在操作系统、数据库管理系统或信息系统不同层次上，使用胶水代码就可以进行连接使用。目前一些软件商提供的大多数
            软件产品都属于这一类
    可修改的构件
        可修改的构件可以进行版本替换。如果对原构件修改错误、增加新功能，可以利用重新“包装”或写接口来实现构件的替换。这种构件在应用系统开发中使
            用得比较多

中间件的基本功能
    负责客户端和服务器之间的连接和通信，客户机与应用层的高效率通信机制
    提供应用层不同服务之间的互操作机制，应用层与数据库之间的连接和控制
    提供一个多层架构的应用开发和应用的平台，一个应用开发框架，支持模块化的应用开发
    屏蔽硬件、操作系统、网络和数据库的差异
    提供应用的负载均衡和高可用性、安全机制与管理功能，以及交易管理机制，保证交易的一致性
    提供一组通用的服务去执行不同的功能，避免重复的工作和使应用之间可以协作

脚本的基本结构
    线性脚本
        采用录制工具记录测试人员手动执行测试用例的（例如鼠标点击、输入字符等）得到的脚本，这些脚本是未做修改的
    结构化脚本
        结构化脚本具有各种逻辑结构，包括选择型结构、分支结构、循环迭代结构，而且具有函数调用功能。结构化脚本具有很好的可用性和灵活性，易于维护
    共享脚本
        指一个脚本可以被多个测试用例使用，即脚本语言允许一个脚本调用另一个脚本
    数据驱动脚本
        数据驱动脚本是将测试输入存储在独立的脚本文件中，而不是脚本中。这样，脚本可以针对不同的数据输入实现多个测试用例
    关键字驱动脚本
        关键字驱动脚本是数据驱动脚本的逻辑扩展，它用测试文件描述测试用例，它说明测试用例做什么，而不是如何做。关键字驱动脚本允许使用描述性的方
            法，只需要提供测试用例的描述，即可生成测试用例

 
    